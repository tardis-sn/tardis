# Specify which branches you want to trigger for continuous deployment and/or applicable for pull requests.
# Otherwise it triggers all of them.
trigger:
- master

pr:
- none

# Variables we can reference later.
variables:
  system.debug: 'true'
  tardis.build.dir: $(Build.Repository.LocalPath)


jobs:
# Title of job
# Virtual machine selected from the available pools.
- job: 'Build_Documentation'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
# When setting up the azure pipeline for the first time, generate a ssh key locally
# and add the generated public key to github as a deploy key through forked_repo_home/settings/deploy_key.
# Use steps listed from: https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys.

# Secure files stored in the azure server are encryped and again decrypted by the azure task that uses the file.
# Download a secure file to a temporary location in the virtual machine.
  - task: DownloadSecureFile@1
    inputs: 
      secureFile: 'id_azure_rsa'
# Make sure you've added the generated private key file (named 'id_azure_rsa' here) to library & authorize it for all pipelines.
# by using: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#how-do-i-authorize-a-secure-file-for-use-in-all-pipelines.

# Install an SSH key prior to a build or release.
# This is needed to give azure access to deploy to github.
# hostName is the line that was added to ~/.ssh/known_hosts when you added the RSA host key. (Output of ssh-keyscan should look something like: [1]As3..=ssh-rsa ..).
# sshPublicKey should be a string value of what is inside your .pub file (i.e: rsa-key Axddd... username@server).
# sshKeySecureFile is the downloaded secure file you generated.
  - task: InstallSSHKey@0
    inputs:
     knownHostsEntry: $(gh_host)
     sshPublicKey: $(public_key)
     #sshPassphrase: $(Agent.TempDirectory)  # Optional - leave empty if it was left empty while generating the key.
     sshKeySecureFile: 'id_azure_rsa'
# For more details, see: http://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/install-ssh-key?view=azure-devops#example-setup-using-github.
# You can mask hostName & sshPublicKey values under secret variables (i.e. gh_host & public_key here) in your azure pipeline build page.
# Follow these steps: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables.

# ##vso[task.prependpath] is a built-in logging command to add paths.
# Add conda to the list of paths available from the terminal.
  - bash: |
          echo "##vso[task.prependpath]$CONDA/bin"        
    displayName: Add conda to PATH
# Make the vm user the owner of the conda path.
# Update conda without asking for confirmation.
  - bash: |
      sudo chown -R $USER $CONDA
      # conda update -y conda
    displayName: updating conda and activating
# Install the conda environment made for tardis.
  - bash: |
        sh ci-helpers/install_tardis_env.sh     
    displayName: 'Install TARDIS env'
# Activate the environment, use sphinx to make the html documentation of the build, and deploy to gh-pages.
  - bash: |
        source activate tardis
        python setup.py install
        sudo npm install -g github-changes
        echo github-changes -o tardis-sn -r tardis --only-pulls --use-commit-body -f CHANGELOG.md -k $(github_changes_oauth)
        github-changes -o tardis-sn -r tardis --only-pulls --use-commit-body -f CHANGELOG.md -k $(github_changes_oauth)
        bash deploy_docs.sh
    displayName: 'TARDIS build and deployment to gh-pages'
# See github.com/tardis-sn/tardis for the contents of these files.
