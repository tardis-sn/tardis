# For more information on how to use this pipeline please refer to:
# http://tardis-sn.github.io/tardis/development/continuous_integration.html

trigger: none
pr: [ master ]

schedules:
  - cron: '0 0 1 * *'
    displayName: 'Monthly test'
    branches:
      include:
        - master

variables:
  system.debug: false
  results.url: 'http://opensupernova.org/~azuredevops/files/refdata-results'
  commit.sha: '$(Build.SourceVersion)'
  pr.number: '$(System.PullRequest.PullRequestNumber)'
  #ref1.hash: ''
  #ref2.hash: ''

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: 'report'
    steps:
      - template: templates/default.yml
        parameters:
          fetchRefdata: false  # See the comment below.
          useMamba: true

      # Azure Repos requires token auth for public repositories containing LFS objects (bug).
      # Fetch reference data from Azure with a PAT until a fix arrives.
      - bash: |
          MY_PAT=$(azure_pat)
          B64_PAT=$(printf ":$MY_PAT" | base64)
          git -c http.extraHeader="Authorization: Basic ${B64_PAT}" clone https://tardis-sn@dev.azure.com/tardis-sn/TARDIS/_git/tardis-refdata $(refdata.dir)
          cd $(refdata.dir); git -c http.extraHeader="Authorization: Basic ${B64_PAT}" lfs fetch --all
        displayName: 'Fetch reference data repository'

      - bash: |
          cd $(refdata.dir)
          git remote add upstream https://tardis-sn@dev.azure.com/tardis-sn/TARDIS/_git/tardis-refdata
          git fetch upstream
          git fetch upstream "+refs/pull/*/head:refs/remotes/upstream/pr/*"
        displayName: 'Set upstream remote'

      - bash: |
          cd $(tardis.dir)
          source activate tardis
          pytest tardis --tardis-refdata=$(refdata.dir) --generate-reference
        displayName: 'Generate reference data'
        condition: or(eq(variables['ref1.hash'], ''), eq(variables['ref2.hash'], ''))

      - bash: |
          source activate tardis
          $(package.manager) install bokeh=2.2 --channel conda-forge --no-update-deps --yes
        displayName: 'Install Bokeh'

      - bash: |
          cd $(refdata.dir)/notebooks
          source activate tardis
          jupyter nbconvert ref_data_compare.ipynb --to html --execute --ExecutePreprocessor.timeout=6000
        displayName: 'Render notebook'

      - bash: |
          cd $(refdata.dir)/notebooks
          source activate tardis
          jupyter nbconvert ref_data_compare.ipynb --to html --execute --allow-errors --ExecutePreprocessor.timeout=6000
        displayName: 'Render notebook (allow errors)'
        condition: failed()

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(refdata.dir)/notebooks/ref_data_compare.html'
          artifactName: 'report'
        displayName: 'Upload artifact'
        condition: succeededOrFailed()

      - task: InstallSSHKey@0
        inputs:
         knownHostsEntry: $(opensupernova_host)
         sshPublicKey: $(opensupernova_pubkey)
         sshKeySecureFile: openSupernovaKey

      - bash: |
          ssh azuredevops@opensupernova.org "mkdir -p /home/azuredevops/public_html/files/refdata-results/$(pr.number)"
          scp $(refdata.dir)/notebooks/ref_data_compare.html azuredevops@opensupernova.org:/home/azuredevops/public_html/files/refdata-results/$(pr.number)/$(commit.sha).html
        displayName: 'Copy files to server'
        condition: succeededOrFailed()

      # Run only if the pipeline is triggered by a pull request.
      - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - task: GitHubComment@0
          inputs:
            gitHubConnection: 'tardis-sn'
            repositoryName: 'tardis-sn/tardis'
            id: $(pr.number)
            comment: '**Build succeeded** $(commit.sha) <br><br> [Click here]($(results.url)/$(pr.number)/$(commit.sha).html) to see results.'
          displayName: 'Post results (success)'

        - task: GitHubComment@0
          inputs:
            gitHubConnection: 'tardis-sn'
            repositoryName: 'tardis-sn/tardis'
            id: $(pr.number)
            comment: '**Build failed** $(commit.sha) <br><br> [Click here]($(results.url)/$(pr.number)/$(commit.sha).html) to see results.'
          displayName: 'Post results (failed)'
          condition: failed()
