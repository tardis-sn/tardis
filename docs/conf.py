# -*- coding: utf-8 -*-
# Licensed under a 3-clause BSD style license - see LICENSE.rst
#
# Astropy documentation build configuration file.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this file.
#
# All configuration values have a default. Some values are defined in
# the global Astropy configuration which is loaded here before anything else.
# See astropy.sphinx.conf for which values are set there.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
import sys, os

sys.path.insert(0, os.path.abspath(".."))
# IMPORTANT: the above commented section was generated by sphinx-quickstart, but
# is *NOT* appropriate for astropy or Astropy affiliated packages. It is left
# commented out with this explanation to make it clear why this should not be
# done. If the sys.path entry above is added, when the astropy.sphinx.conf
# import occurs, it will import the *source* version of astropy instead of the
# version installed (if invoked as "make html" or directly with sphinx), or the
# version in the build directory (if "python setup.py build_sphinx" is used).
# Thus, any C-extensions that are needed to build the documentation will *not*
# be accessible, and the documentation will not build correctly.

# Load all of the global Astropy configuration

import datetime

intersphinx_mapping = {
    "python": ("http://docs.python.org/", None),
    "numpy": ("http://docs.scipy.org/doc/numpy/", None),
    "scipy": ("http://docs.scipy.org/doc/scipy/reference/", None),
    "matplotlib": ("http://matplotlib.sourceforge.net/", None),
    "astropy": ("http://docs.astropy.org/en/stable/", None),
    "h5py": ("http://docs.h5py.org/en/latest/", None),
    "pandas": ("http://pandas.pydata.org/pandas-docs/dev/", None),
}

# import sphinx_bootstrap_theme
import sphinx_rtd_theme

extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.mathjax",
    "sphinx.ext.graphviz",
    "sphinx.ext.viewcode",
    "numpydoc",
    "nbsphinx",
    "sphinx-jsonschema",
    "recommonmark",
    "sphinxcontrib.apidoc",
]

source_suffix = {
    ".rst": "restructuredtext",
    #    '.txt': 'markdown',
    ".md": "markdown",
}
## get's rid of many toctree contains errors: see https://github.com/phn/pytpm/issues/3#issuecomment-12133978
numpydoc_show_class_members = False
extensions += ["matplotlib.sphinxext.plot_directive", "sphinxcontrib.bibtex"]

nbsphinx_execute = "auto"

nbsphinx_execute_arguments = [
    "--InlineBackend.figure_formats={'svg', 'pdf'}",
    "--InlineBackend.rc={'figure.dpi': 96}",
]

nbsphinx_prolog = """
This notebook is available at 
https://github.com/tardis-sn/tardis/tree/master/docs/{{ env.doc2path(env.docname, base=None) }}
----
"""

# -- General configuration ----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.1'
templates_path = ["_templates"]
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["_build", "_templates", "**.ipynb_checkpoints"]
# exclude_patterns.append('_templates')

# This is added to the end of RST files - a good place to put substitutions to
# be used globally.
rst_epilog = """
"""

# -- Project information ------------------------------------------------------

# This does not *have* to match the package name, but typically does
project = "TARDIS"
author = "TARDIS collaboration"
copyright = "{0}-{1}, {2}".format(2013, datetime.datetime.now().year, author)

master_doc = "index"
# default_role = 'obj'
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

import tardis

# The short X.Y version.
version = tardis.__version__.split("-", 1)[0]
# The full version, including alpha/beta/rc tags.
release = tardis.__version__


# -- APIDoc configuration -----------------------------------------------------
apidoc_module_dir = "../tardis"
apidoc_output_dir = "api"
apidoc_excluded_paths = ["*tests*", "*setup_package*"]
apidoc_separate_modules = True

# -- Options for HTML output ---------------------------------------------------

# A NOTE ON HTML THEMES
# The global astropy configuration uses a custom theme, 'bootstrap-astropy',
# which is installed along with astropy. A different theme can be used or
# the options for this theme can be modified by overriding some of the
# variables set in the global configuration. The variables set in the
# global configuration are listed below, commented out.

# Add any paths that contain custom themes here, relative to this directory.
# To use a different custom theme, add the directory containing the theme.
# html_theme_path = []

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes. To override the custom theme, set this to the
# name of a builtin theme or the name of a custom theme in html_theme_path.
# html_theme = None
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}
html_static_path = ["_static"]

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "tardis_logo.ico"

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = ''

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "{0} v{1}".format(project, release)

# Output file base name for HTML help builder.
htmlhelp_basename = project + "doc"

# html_extra_path = ['research/code_comparison/plasma_compare/tardis_example.yml']


# -- Options for LaTeX output --------------------------------------------------

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
    ("index", project + ".tex", project + " Documentation", author, "manual")
]


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ("index", project.lower(), project + " Documentation", [author], 1)
]

# -- Creating redirects -------------------------------------------------------

# One entry per redirect. List of tuples: (old_fpath, new_fpath)
# Paths are relative to source dir i.e. "docs/" & must include file extension
# Only source files that convert to html like .rst, .ipynb, etc. are allowed
redirects = [
    ("using/gui/index.rst", "using/visualization/index.rst"),
]

from shutil import copyfile


def to_html_ext(path):
    """Convert extension in the file path to .html"""
    return os.path.splitext(path)[0] + ".html"


def create_redirect_files(app, docname):
    """Create redirect html files at old paths specified in `redirects` list."""
    template_html_path = os.path.join(
        app.srcdir, "_templates/redirect_file.html"
    )

    if app.builder.name == "html":
        for (old_fpath, new_fpath) in redirects:
            # Create a page redirection html file for old_fpath
            old_html_fpath = to_html_ext(os.path.join(app.outdir, old_fpath))
            os.makedirs(os.path.dirname(old_html_fpath), exist_ok=True)
            copyfile(template_html_path, old_html_fpath)

            # Replace url placeholders i.e. "#" in this file with the new url
            new_url = os.path.relpath(
                to_html_ext(new_fpath), os.path.dirname(old_fpath)
            )  # urls in a html file are relative to the dir containing it
            with open(old_html_fpath) as f:
                new_content = f.read().replace("#", new_url)
            with open(old_html_fpath, "w") as f:
                f.write(new_content)


def setup(app):
    app.connect("build-finished", create_redirect_files)
