#  For more information about TARDIS pipelines, please refer to:
#
#    https://tardis-sn.github.io/tardis/development/continuous_integration.html

name: tests

on:
  push:
    branches:
    - '*'

  pull_request:
    branches:
    - '*'

env:
  CACHE_NUMBER: 0  # increase to reset cache manually
  PYTEST_FLAGS: --tardis-refdata=${{ github.workspace }}/tardis-refdata --tardis-snapshot-data=${{ github.workspace }}/tardis-regressions
                --cov=tardis --cov-report=xml --cov-report=html 
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  build:
    if: github.repository_owner == 'tardis-sn'
    strategy:
      matrix:
        pip: [true, false]
        label: [osx-64, linux-64]
        include:
          - label: osx-64
            os: macos-latest
            prefix: /Users/runner/miniconda3/envs/tardis

          - label: linux-64
            os: ubuntu-latest
            prefix: /usr/share/miniconda3/envs/tardis

    name: ${{ matrix.label }}-pip-${{ matrix.pip }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        if: matrix.pip == false

      - name: Clone tardis-sn/tardis-refdata
        uses: actions/checkout@v2
        with:
          repository: tardis-sn/tardis-refdata
          path: tardis-refdata
          lfs: false

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
        working-directory: tardis-refdata

      - name: Restore LFS cache
        uses: actions/cache/restore@v3
        id: lfs-cache
        with:
          path: tardis-refdata/.git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('tardis-refdata/.lfs-assets-id') }}-v1

      - name: Git LFS Pull
        run: git lfs pull
        working-directory: tardis-refdata
        if: steps.lfs-cache.outputs.cache-hit != 'true'
      
      - name: Git LFS Checkout
        run: git lfs checkout
        working-directory: tardis-refdata
        if: steps.lfs-cache.outputs.cache-hit == 'true'
      
      - name: Save LFS cache if not found
        # uses fake ternary 
        # for reference: https://github.com/orgs/community/discussions/26738#discussioncomment-3253176
        if: ${{ steps.lfs-cache.outputs.cache-hit != 'true'  && always() || false }}
        uses: actions/cache/save@v3
        id: lfs-cache-save
        with:
          path: tardis-refdata/.git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('tardis-refdata/.lfs-assets-id') }}-v1
      
      - name: Clone tardis-sn/tardis-regressions
        uses: actions/checkout@v4
        with:
          repository: tardis-sn/tardis-regressions
          path: tardis-regressions

      - name: Setup environment
        uses: conda-incubator/setup-miniconda@v2
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            activate-environment: tardis
            use-mamba: true

      - name: Download Lock File
        run:  wget -q https://raw.githubusercontent.com/tardis-sn/tardis/master/conda-${{ matrix.label }}.lock
        if: matrix.pip == true

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}
          key: conda-${{ matrix.label }}-${{ hashFiles('conda-${{ matrix.label }}.lock') }}-${{ env.CACHE_NUMBER }}
        id: cache-conda

      - name: Update environment
        run: mamba update -n tardis --file conda-${{ matrix.label }}.lock
        if: steps.cache-conda.outputs.cache-hit != 'true'
      
      - name: Install package editable
        run: | 
          pip install -e .
          echo "TARDIS_PIP_PATH=tardis" >> $GITHUB_ENV
        if: matrix.pip == false

      - name: Install package git
        run: pip install git+https://github.com/tardis-sn/tardis.git@${{ github.ref }}
        if: matrix.pip == true

      - name: Set pip path
        if: matrix.pip == true
        run: |
          location_line=$(pip show tardis | grep -i -x "Location:.*")
          directory_path=$(echo $location_line | awk -F " " '{print $2}')
          echo "TARDIS_PIP_PATH=$directory_path" >> $GITHUB_ENV
      
      - name: Set install path
        if: matrix.pip == false
        run: |
          directory_path="."
          echo "TARDIS_PIP_PATH=$directory_path" >> $GITHUB_ENV

      - name: Run tests
        run: pytest tardis ${{ env.PYTEST_FLAGS }}
        working-directory: ${{ env.TARDIS_PIP_PATH }}

      - name: Upload to Codecov
        run: bash <(curl -s https://codecov.io/bash)
