#  For more information about TARDIS pipelines, please refer to:
#
#    https://tardis-sn.github.io/tardis/development/continuous_integration.html

name: build-docs

on:

  push:
    branches:
      - master                          # default branch
      - docs/gah21-workflow

    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'         # semantic versions

  pull_request_target:                  # pull request build
    branches:
      - '*'

    types:
      - opened
      - reopened
      - synchronize
      - labeled                         # requires the `build-docs` label

  workflow_dispatch:                    # manual trigger
    branches:
      - '*'

env:
  PYTHON: 3.8
  PKGS_FILE: tardis_env3.yml            # .txt (`pip`) or .yml (`conda`) file
  BUILD_CMD: cd docs/ && make html
  DEPLOY_BRANCH: gh-pages               #  target branch to deploy _build/html
  ROOT_REDIRECT: latest                 # `latest` or `stable`

concurrency:
  group: build-docs-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  build:

    if: github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request_target' &&
        contains(github.event.pull_request.labels.*.name, 'build-docs'))

    runs-on: ubuntu-latest
    steps:
  
      - uses: actions/checkout@v2
        if: github.event_name != 'pull_request_target'

      - name: Checkout pull/${{ github.event.number }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: github.event_name == 'pull_request_target'

      - name: Check branches
        run: |
          CHECK_DEPLOY=$(git ls-remote --heads origin refs/heads/${{ env.DEPLOY_BRANCH }})
          echo "::set-output name=DEPLOY::$(! [[ -z $CHECK_DEPLOY ]] && echo 'true' || echo 'false')"

          CHECK_STABLE=$(git ls-remote --heads origin refs/heads/stable)
          echo "::set-output name=STABLE::$(! [[ -z $CHECK_STABLE ]] && echo 'true' || echo 'false')"

          cat $GITHUB_ENV
        id: check-branches

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            activate-environment: sphinx
            python-version: ${{ env.PYTHON }}
            use-mamba: true

      - name: Install packages
        run: |
          if [[ ${{ env.PKGS_FILE }} == *.txt ]]; then
            pip install -r ${{ env.PKGS_FILE }}

          elif [[ ${{ env.PKGS_FILE }} == *.yml ]] || [[ ${{ env.PKGS_FILE }} == *.yaml ]]; then
            mamba env update -n sphinx -f ${{ env.PKGS_FILE }}

          else
            echo "Unsupported file extension"
            exit 1

          fi

      - name: Build documentation
        run: ${{ env.BUILD_CMD }}

      - name: Set destination directory
        run: |
          BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          TAG=$(echo ${GITHUB_REF#refs/tags/})

          if [[ $EVENT == push ]] || [[ $EVENT == workflow_dispatch ]]; then
            if [[ -z $TAG ]] || [[ $TAG == $GITHUB_REF ]]; then

              if [[ $BRANCH == $DEFAULT ]]; then
                echo "DEST_DIR=latest" >> $GITHUB_ENV
              else
                echo "DEST_DIR=branch/$BRANCH" >> $GITHUB_ENV
              fi

            elif [[ ! -z $TAG ]]; then
               echo "DEST_DIR=tag/$TAG" >> $GITHUB_ENV

            else
              echo "Unexpected ref $GITHUB_REF"
              exit 1
            fi

          elif [[ $EVENT == pull_request_target ]]; then
            echo "DEST_DIR=pull/$PR" >> $GITHUB_ENV

          else
            echo "Unexpected event trigger $EVENT"
            exit 1

          fi

          cat $GITHUB_ENV
        env:
          DEFAULT: ${{ github.event.repository.default_branch }}
          EVENT: ${{ github.event_name }}
          PR: ${{ github.event.number }}

      - name: Deploy ${{ env.DEST_DIR }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: ${{ env.DEPLOY_BRANCH }}
          publish_dir: ./docs/_build/html
          destination_dir: ${{ env.DEST_DIR }}
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Redirect root
        run: |
          mkdir redirects && cd redirects
          echo '<head>' >> index.html
          echo '  <meta http-equiv="Refresh" content="0; url='/${{ github.event.repository.name }}/${{ env.ROOT_REDIRECT }}'"/>' >> index.html
          echo '</head>' >> index.html

      - name: Redirect stable
        run: |
          git fetch origin
          git checkout ${{ env.DEPLOY_BRANCH }}

          if [[ -d tag ]] && [[ ! -z $(ls -A tag) ]]; then
            LAST_TAG=$(ls -d tag/*/ | sort -V | tail -n 1)
            mv $LAST_TAG /tmp/stable

            git checkout -
            mv /tmp/stable redirects
            ls -lR redirects

          else
            echo "No tags to deploy"

          fi
        if: steps.check-branches.outputs.DEPLOY == 'true' && steps.check-branches.outputs.STABLE == 'false'

      - name: Deploy redirects
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./redirects
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
