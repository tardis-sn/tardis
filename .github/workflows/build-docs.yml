#  For more information about TARDIS pipelines, please refer to:
#
#    https://tardis-sn.github.io/tardis/contributing/development/continuous_integration.html

name: docs

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

    types:
      - opened
      - reopened
      - synchronize
      - labeled # requires the `build-docs` label
      - ready_for_review

  workflow_dispatch: # manual trigger

env:
  CACHE_NUMBER: 0 # increase to reset cache manually
  DEPLOY_BRANCH: gh-pages # deployed docs branch
  HDF5_USE_FILE_LOCKING: "FALSE" # disable file locking

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  test-cache:
    uses: ./.github/workflows/lfs-cache.yml
    with:
      atom-data-sparse: true
      regression-data-repo: tardis-sn/tardis-regression-data
      allow_lfs_pull: ${{ github.ref == 'refs/heads/master' || contains(github.event.pull_request.labels.*.name, 'git-lfs-pull') }}

  check-for-changes:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    outputs:
      trigger-check-outcome: ${{ steps.trigger_check.outcome }}
      docs-check-outcome: ${{ steps.docs_check.outcome }}
    steps:
      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'

      - name: Checkout pull/${{ github.event.number }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
        if: github.event_name == 'pull_request'

      - name: Check for trigger by push event, manual dispatch, build-docs label on a PR
        id: trigger_check
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'build-docs')
        run: |
          echo "Building docs as a test."
          exit 0
        continue-on-error: true

      - name: Check for changes in documentation
        run: |
          if git diff origin/master..."$(git rev-parse --abbrev-ref HEAD)" --name-only | cat | grep '^docs/' | grep -q .; then
              num_files=$(git diff --name-only origin/master...HEAD | grep '^docs/' | wc -l)
              echo "Changes found in documentation files: $num_files"
              exit 0
          else
              echo "No changes found in documentation files - will stop running the pipeline."
              exit 1
          fi
        id: docs_check
        if: steps.trigger_check.outcome != 'success'
        continue-on-error: true

  build-docs:
    runs-on: ubuntu-latest
    needs: [test-cache, check-for-changes]
    if: needs.check-for-changes.outputs.trigger-check-outcome == 'success' || needs.check-for-changes.outputs.docs-check-outcome == 'success'
    outputs:
      docs_success: ${{ steps.docs_status_success.outputs.success || steps.docs_status_failure.outputs.success }}
    steps:
      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'

      - name: Checkout pull/${{ github.event.number }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: github.event_name == 'pull_request'

      - name: Setup LFS
        uses: ./.github/actions/setup_lfs
        with:
          atom-data-sparse: true

      - name: Setup environment
        uses: tardis-sn/tardis-actions/setup-env@main
        with:
          os-label: linux-64

      - name: Copy atom_data
        run: |
          mkdir -p ~/Downloads/tardis-data && cp -a ./tardis-regression-data/atom_data/. ~/Downloads/tardis-data

      - name: Install package
        run: pip install -e ".[viz]"

      - name: Install Sphinx extensions
        run: |
          pip install sphinxcontrib-googleanalytics

      - name: Build documentation
        run: cd docs/ && make html NCORES=auto

      - name: Set destination directory
        run: |
          BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          if [[ $EVENT == push ]] || [[ $EVENT == workflow_dispatch ]]; then

            if [[ $BRANCH == $DEFAULT ]]; then
              echo "DEST_DIR=" >> $GITHUB_ENV
            else
              echo "DEST_DIR=branch/$BRANCH" >> $GITHUB_ENV
            fi

          elif [[ $EVENT == pull_request ]]; then
            echo "DEST_DIR=pull/$PR" >> $GITHUB_ENV

          else
            echo "Unexpected event trigger $EVENT"
            exit 1

          fi

          cat $GITHUB_ENV
        env:
          DEFAULT: ${{ github.event.repository.default_branch }}
          EVENT: ${{ github.event_name }}
          PR: ${{ github.event.number }}

      - name: Set clean branch option
        run: |
          if [[ $EVENT == workflow_dispatch ]]; then
            echo "CLEAN_BRANCH=true" >> $GITHUB_ENV

          else
            echo "CLEAN_BRANCH=false" >> $GITHUB_ENV

          fi

          cat $GITHUB_ENV
        env:
          EVENT: ${{ github.event_name }}

      - name: Deploy ${{ env.DEST_DIR }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          publish_branch: ${{ env.DEPLOY_BRANCH }}
          publish_dir: ./docs/_build/html
          destination_dir: ${{ env.DEST_DIR }}
          keep_files: true
          force_orphan: ${{ env.CLEAN_BRANCH }}
          user_name: "TARDIS Bot"
          user_email: "tardis.sn.bot@gmail.com"

      - name: Find comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          body-includes: Hi, human.
        if: always() && github.event_name == 'pull_request'

      - name: Set docs status (success)
        if: success()
        id: docs_status_success
        run: |
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Set docs status (failure)
        if: failure()
        id: docs_status_failure
        run: |
          echo "success=false" >> $GITHUB_OUTPUT

  update-docs-pr-description:
    needs: build-docs
    if: always() && github.event_name == 'pull_request'
    uses: ./.github/workflows/pr-description-updater.yml
    permissions:
      pull-requests: write
    with:
      section_id: 'docs'
      content: |
        ${{ needs.build-docs.outputs.docs_success == 'true' && '✅' || '❌' }} Documentation Build

        ${{ needs.build-docs.outputs.docs_success == 'true' && format('[View documentation](https://{0}.github.io/{1}/pull/{2}/index.html)', github.repository_owner, github.event.repository.name, github.event.number) || format('[View build logs](https://github.com/{0}/{1}/actions/runs/{2}?check_suite_focus=true)', github.repository_owner, github.event.repository.name, github.run_id) }}
      pr_number: '${{ github.event.number }}'
      title: 'Documentation Build'
    secrets:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

  alert-on-race-condition:
    needs: update-docs-pr-description
    if: always() && cancelled() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Alert developers about race condition
        run: |
          echo "::error::PR description update was cancelled due to race condition. Multiple workflows may be updating the same PR description simultaneously."
          exit 1
