FROM condaforge/miniforge3:latest

# Create arguments for the paths.
ARG CODE_PATH="/app/code"

# Install packages in Ubuntu.
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Mexico_City
RUN apt-get --yes update && apt-get --yes install nginx git-lfs

# Redirect the html path to our web page generated by ASV.
RUN rm --force --recursive /var/www/html; \
    ln --symbolic "${CODE_PATH}/.asv/html" /var/www

# Clone the GitHub repositories which contains data.
WORKDIR /app
RUN git clone https://github.com/tardis-sn/tardis-refdata.git
RUN git clone https://github.com/tardis-sn/tardis-regression-data.git
WORKDIR /app/tardis-refdata
RUN git lfs ls-files --size
RUN git lfs pull

# Set up mamba.
ARG MAMBA_ENV_NAME="benchmark"
RUN mamba create --yes --name "${MAMBA_ENV_NAME}" python asv mamba
RUN mamba init
RUN echo "conda deactivate; mamba activate ${MAMBA_ENV_NAME}" >> "${HOME}/.bashrc";

# Copy the basic files to set up Conda.
WORKDIR "${CODE_PATH}"
COPY conda-linux-64.lock ./

# Create TARDIS environment in Conda with Mamba.
ARG CONDA_ENV_NAME="tardis"
RUN mamba create --yes --name "${CONDA_ENV_NAME}" --file conda-linux-64.lock

# Copy the basic files to set up ASV.
COPY tardis_env3.yml asv.conf.json ./

# Set up the ASV.
RUN . "${HOME}/.bashrc" \
    && asv machine --yes \
    && asv setup || true

# Copy the whole TARDIS project in the Docker image.
COPY . .

# Run the unit tests.
RUN . "${HOME}/.bashrc" \
    && mamba deactivate \
    && mamba activate "${CONDA_ENV_NAME}" \
    && python setup.py develop \
    && pytest tardis || true

# Run the benchmarks and publish (generate the results and web page).
RUN . "${HOME}/.bashrc" \
    && asv run \
    && asv publish

# Execute the Nginx web service.
EXPOSE 80/tcp
CMD ["-g", "daemon off;"]
ENTRYPOINT ["/usr/sbin/nginx"]
