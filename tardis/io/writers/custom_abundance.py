import yaml
import ipywidgets as ipw
from pathlib import Path
from astropy import units as u
import pandas as pd


class CustomYAML(yaml.YAMLObject):
    """A custom YAML object generated by required properties."""

    def __init__(
        self, name, d_time_0, i_time_0, v_inner_boundary, v_outer_boundary
    ):
        """Initialize CustomYAML object with given properties.

        Parameters
        ----------
        name : str
            Name of the YAML file.
        d_time_0 : astropy.units.quantity.Quantity
            Initial time for the density in the model.
        i_time_0 : astropy.units.quantity.Quantity
            Initial time for isotope decay. Set to 0 for no isotopes.
        v_inner_boundary : astropy.units.quantity.Quantity
            Velocity of the inner boundary.
        v_outer_boundary : astropy.units.quantity.Quantity
            Velocity of the outer boundary.
        """
        self.name = name
        self.model_density_time_0 = d_time_0
        self.model_isotope_time_0 = i_time_0
        self.tardis_model_config_version = "v1.0"
        self.datatype = {}
        self.datatype["fields"] = []
        self.v_inner_boundary = v_inner_boundary
        self.v_outer_boundary = v_outer_boundary

    def create_fields_dict(self, elements):
        """Create a dictionary to store the items in 'fields' part.

        Parameters
        ----------
        elements : list of str
            A list of elements or isotopes' symbols.
        """
        for i in range(len(elements) + 2):
            field = {}

            if i == 0:
                field["name"] = "velocity"
                field["unit"] = "km/s"
            elif i == 1:
                field["name"] = "density"
                field["unit"] = "g/cm^3"
            else:
                field["name"] = elements[i - 2]
                field["desc"] = f"fractional {elements[i-2]} abundance"

            self.datatype["fields"].append(field)


YAML_DELIMITER = "---"


class CustomAbundanceCSVYWriter:
    """A class to write custom abundance csvy files."""

    @classmethod
    def to_csvy(
        cls,
        d_time_0,
        i_time_0,
        velocity,
        elements,
        no_of_elements,
        abundance,
        density,
        path,
        overwrite,
    ):
        """Output CSVY file on the specified path.

        Parameters
        ----------
        d_time_0 : astropy.units.quantity.Quantity
            Initial time for the density in the model.
        velocity : astropy.units.quantity.Quantity
        elements : list of str
            A list of elements or isotopes' symbols.
        no_of_elements : int
            The number of elements in the model.
        abundance : pd.DataFrame
        density : astropy.units.quantity.Quantity
        path : str
            Output path.
        overwrite : bool
            True if overwriting, False otherwise.
        """
        posix_path = Path(path)
        posix_path = posix_path.with_suffix(".csvy")

        if posix_path.exists() and not overwrite:
            raise FileExistsError(
                "The file already exists. Click the 'overwrite' checkbox to overwrite it."
            )
        else:
            cls.write_yaml_portion(
                d_time_0, i_time_0, velocity, elements, posix_path
            )
            cls.write_csv_portion(
                velocity,
                elements,
                no_of_elements,
                abundance,
                density,
                posix_path,
            )

    @classmethod
    def write_yaml_portion(cls, d_time_0, i_time_0, velocity, elements, path):
        """Write the YAML portion of the output file.

        Parameters
        ----------
        d_time_0 : astropy.units.quantity.Quantity
            Initial time for the density in the model.
        velocity : astropy.units.quantity.Quantity
        elements : list of str
            A list of elements or isotopes' symbols.
        path : pathlib.PosixPath
        """
        name = path.name
        custom_yaml = CustomYAML(
            name,
            d_time_0,
            i_time_0,
            velocity[0],
            velocity[-1],
        )
        custom_yaml.create_fields_dict(elements)

        with path.open("w") as f:
            yaml_output = yaml.dump(custom_yaml, sort_keys=False)

            # Add YAML delimiter
            yaml_output_snippets = yaml_output.split("\n")
            yaml_output_snippets[0] = yaml_output_snippets[-1] = YAML_DELIMITER
            yaml_output = "\n".join(yaml_output_snippets) + "\n"

            f.write(yaml_output)

    @classmethod
    def write_csv_portion(
        cls,
        velocity,
        elements,
        no_of_elements,
        abundance,
        density,
        path,
    ):
        """Write the CSV portion of the output file.

        Parameters
        -----------
        velocity : astropy.units.quantity.Quantity
        elements : list of str
            A list of elements or isotopes' symbols.
        no_of_elements : int
            The number of elements in the model.
        abundance : pd.DataFrame
        density : astropy.units.quantity.Quantity
        path : pathlib.PosixPath
        """
        try:
            data = abundance.T
            data.columns = elements
            first_row = [0] * no_of_elements
            data.loc[-1] = first_row
            data.index += 1  # shifting index
            data.sort_index(inplace=True)

            formatted_v = pd.Series(velocity.value).apply(lambda x: "%.3e" % x)
            # Make sure velocity is within the boundary.
            formatted_v[0] = velocity.value[0]
            formatted_v[-1] = velocity.value[-1]

            data.insert(0, "velocity", formatted_v)
            data.insert(1, "density", density)

            data.to_csv(path, mode="a", index=False)
        except pd.errors.EmptyDataError:
            data = None
