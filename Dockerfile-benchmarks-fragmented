FROM condaforge/miniforge3:latest

# Create arguments for the paths.
ARG ASV_PATH="/app/asv"
ARG CODE_PATH="/app/code"

# Install packages in Ubuntu.
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Mexico_City
RUN apt-get --yes update && apt-get --yes install nginx git-lfs

# Redirect the html path to our web page generated by ASV.
RUN rm --force --recursive /var/www/html; \
    ln --symbolic "${CODE_PATH}/.asv/html" /var/www

# Clone the GitHub repositories which contains data.
WORKDIR /app
RUN git clone https://github.com/tardis-sn/tardis-refdata.git
RUN git clone https://github.com/tardis-sn/tardis-regression-data.git
WORKDIR /app/tardis-refdata
RUN git lfs ls-files --size
RUN git lfs pull

# Create user and group.
# This user should be the same as the owner of the files in this directory (`tardis`).
ARG UID
ARG GID
ARG USER_NAME
ARG GROUP_NAME
RUN groupadd --gid "${GID}" --non-unique "${GROUP_NAME}"
RUN useradd --uid "${UID}" --non-unique --gid "${GID}" --create-home --shell /bin/bash "${USER_NAME}"

# Create mamba environment.
ARG MAMBA_ENV_NAME="benchmark"
RUN mamba create --yes --name "${MAMBA_ENV_NAME}" python asv mamba
RUN mamba init
RUN echo "conda deactivate; mamba activate ${MAMBA_ENV_NAME}" >> "${HOME}/.bashrc";

# Create TARDIS environment in Conda with Mamba.
WORKDIR "${ASV_PATH}"
ARG CONDA_ENV_NAME="tardis"
COPY --chown="${UID}:${GID}" conda-linux-64.lock ./
RUN mamba create --yes --name "${CONDA_ENV_NAME}" --file conda-linux-64.lock

# Copy the basic files to set up ASV.
COPY --chown="${UID}:${GID}" tardis_env3.yml asv.conf.json ./
RUN sed -i 's|"repo": "."|"repo": "'"${CODE_PATH}"'"|' asv.conf.json
RUN sed -i 's|.asv/env|'"${ASV_PATH}"'/env|' asv.conf.json
RUN sed -i 's|.asv/results|'"${CODE_PATH}"'/.asv/results|' asv.conf.json
RUN sed -i 's|.asv/html|'"${CODE_PATH}"'/.asv/html|' asv.conf.json
RUN sed -i 's|"benchmark_dir": "benchmarks"|"benchmark_dir": "'"${CODE_PATH}"'/benchmarks"|' asv.conf.json

# Set up the ASV.
RUN . "${HOME}/.bashrc" \
    && asv machine --yes \
    && asv setup || true

# Run the benchmarks and publish (generate the results and web page).
RUN --mount=type=bind,source=.,target="${CODE_PATH}",rw \
    . "${HOME}/.bashrc" \
    && asv run \
    && asv publish

# The path /app/code is a live reference to our host TARDIS project.
# Git needs to trust this path.
WORKDIR "${CODE_PATH}"
RUN git config --global --add safe.directory "${CODE_PATH}"

# Run the unit tests.
RUN --mount=type=bind,source=.,target="${CODE_PATH}",rw \
    . "${HOME}/.bashrc" \
    && mamba deactivate \
    && mamba activate "${CONDA_ENV_NAME}" \
    && python setup.py develop \
    && pytest tardis || true

# Set up the user environment.
USER "${UID}:${GID}"
RUN mamba init
RUN echo "conda deactivate; mamba activate ${MAMBA_ENV_NAME}" >> "${HOME}/.bashrc";
USER root
RUN chown "${UID}:${GID}" /app
RUN chown -R "${UID}:${GID}" "${ASV_PATH}"
RUN chown -R "${UID}:${GID}" /app/tardis-refdata
RUN chown -R "${UID}:${GID}" /app/tardis-regression-data

# Change permissions to modify the Python packages for debug propouses.
RUN chown -R "${UID}:${GID}" "/opt/conda/envs/${MAMBA_ENV_NAME}/lib/python3.12/site-packages"

# Return to the ASV path.
WORKDIR "${ASV_PATH}"

# Execute the Nginx web service.
EXPOSE 80/tcp
CMD ["-g", "daemon off;"]
ENTRYPOINT ["/usr/sbin/nginx"]
